// Code generated by MockGen. DO NOT EDIT.
// Source: .\repository\todoRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	model "assignment/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITodoRepository is a mock of ITodoRepository interface.
type MockITodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITodoRepositoryMockRecorder
}

// MockITodoRepositoryMockRecorder is the mock recorder for MockITodoRepository.
type MockITodoRepositoryMockRecorder struct {
	mock *MockITodoRepository
}

// NewMockITodoRepository creates a new mock instance.
func NewMockITodoRepository(ctrl *gomock.Controller) *MockITodoRepository {
	mock := &MockITodoRepository{ctrl: ctrl}
	mock.recorder = &MockITodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoRepository) EXPECT() *MockITodoRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockITodoRepository) FindAll() model.TodoItems {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(model.TodoItems)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockITodoRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockITodoRepository)(nil).FindAll))
}

// Insert mocks base method.
func (m *MockITodoRepository) Insert(item *model.TodoItem) *model.TodoItem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", item)
	ret0, _ := ret[0].(*model.TodoItem)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockITodoRepositoryMockRecorder) Insert(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockITodoRepository)(nil).Insert), item)
}
